// This code was auto-generated on Mon Jun 04 2018 09:02:54 GMT+0200 (CEST)
// by the eno-locales project (https://github.com/eno-lang/eno-locales)
//
// eno-locales
// version 0.1.4

module.exports = {
  de: {
    elements: {
      dictionary: 'Dictionary',
      dictionaryEntry: 'Dictionary Eintrag',
      document: 'Dokument',
      empty: 'Leeres Element',
      field: 'Feld',
      list: 'Liste',
      listItem: 'Listeneintrag',
      section: 'Sektion',
      value: 'Wert'
    },
    reporting: {
      contentHeader: 'Inhalt',
      gutterHeader: 'Zeile'
    },
    tokenization: {
      escapedUnterminatedName: (line) => `In Zeile ${line} wird der Name eines Elements escaped, jedoch wird diese Escape Sequenz bis zum Ende der Zeile nicht mehr beendet.`,
      invalidLine: (line) => `Zeile ${line} folgt keinem spezifierten Muster.`,
      unterminatedBlock: (name, line) => `Der Block '${name}' der in Zeile ${line} beginnt wird bis zum Ende des Dokuments nicht mehr beendet.`
    },
    analysis: {
      dictionaryEntryInField: (line) => `Zeile ${line} enthält einen Dictionary Eintrag in einem Feld.`,
      dictionaryEntryInList: (line) => `Zeile ${line} enthält einen Dictionary Eintrag in einer Liste.`,
      duplicateDictionaryEntryName: (dictionary_name, entry_name) => `Das Dictionary '${dictionary_name}' enthält zwei Einträge mit dem Namen '${entry_name}'.`,
      fieldAppendInDictionary: (line) => `Zeile ${line} enthält eine Hinzufügung (zu einem Feld) in einem Dictionary.`,
      fieldAppendInList: (line) => `Zeile ${line} enthält eine Hinzufügung (zu einem Feld) in einer Liste.`,
      listItemInDictionary: (line) => `Zeile ${line} enthält einen Listeneintrag in einem Dictionary`,
      listItemInField: (line) => `Zeile ${line} enthält einen Listeneintrag in einem Feld`,
      missingNameForDictionaryEntry: (line) => `Zeile ${line} enthält einen Dictionary Eintrag ohne dass davor ein Name für ein Dictionary angegeben wurde.`,
      missingNameForFieldAppend: (line) => `Zeile ${line} enthält einen Hinzufügung (zu einem Feld) ohne dass davor ein Name für ein Feld angegeben wurde.`,
      missingNameForListItem: (line) => `Zeile ${line} enthält einen Listeneintrag ohne dass davor ein Name für eine Liste angegeben wurde.`,
      sectionHierarchyLayerSkip: (line) => `Zeile ${line} beginnt eine Sektion die mehr als eine Ebene tiefer liegt als die aktuelle.`
    },
    resolution: {
      copyingBlockIntoDictionary: (line) => `In Zeile ${line} wird ein Block in ein Dictionary kopiert.`,
      copyingBlockIntoList: (line) => `In Zeile ${line} wird ein Block in eine Liste kopiert.`,
      copyingBlockIntoSection: (line) => `In Zeile ${line} wird ein Block in eine Sektion kopiert.`,
      copyingDictionaryIntoField: (line) => `In Zeile ${line} wird ein Dictionary in ein Feld kopiert.`,
      copyingDictionaryIntoList: (line) => `In Zeile ${line} wird ein Dictionary in eine Liste kopiert.`,
      copyingDictionaryIntoSection: (line) => `In Zeile ${line} wird ein Dictionary in eine Sektion kopiert.`,
      copyingFieldIntoDictionary: (line) => `In Zeile ${line} wird ein Feld in ein Dictionary kopiert.`,
      copyingFieldIntoList: (line) => `In Zeile ${line} wird ein Feld in eine Liste kopiert.`,
      copyingFieldIntoSection: (line) => `In Zeile ${line} wird ein Feld in eine Sektion kopiert.`,
      copyingListIntoDictionary: (line) => `In Zeile ${line} wird eine Liste in ein Dictionary kopiert.`,
      copyingListIntoField: (line) => `In Zeile ${line} wird eine Liste in ein Feld kopiert.`,
      copyingListIntoSection: (line) => `In Zeile ${line} wird eine Liste in eine Sektion kopiert.`,
      copyingSectionIntoDictionary: (line) => `In Zeile ${line} wird eine Sektion in ein Dictionary kopiert.`,
      copyingSectionIntoEmpty: (line) => `In Zeile ${line} wird eine Sektion in ein leeres Element kopiert.`,
      copyingSectionIntoField: (line) => `In Zeile ${line} wird eine Sektion in ein Feld kopiert.`,
      copyingSectionIntoList: (line) => `In Zeile ${line} wird eine Sektion in eine Liste kopiert.`,
      cyclicDependency: (line, name) => `In Zeile ${line} wird '${name}' in sich selbst kopiert.`,
      multipleTemplatesFound: (line, name) => `In Zeile ${line} ist nicht klar welches der Elemente mit dem Namen '${name}' kopiert werden soll.`,
      templateNotFound: (line, name) => `In Zeile ${line} soll das Element '${name}' kopiert werden, es wurde aber nicht gefunden.`
    },
    validation: {
      exactCountNotMet: (name, actual, expected) => `Die Liste '${name}' enthält ${actual} Einträge, muss aber genau ${expected} Einträge enthalten.`,
      excessName: (name) => `Ein überschüssiges Element mit dem Namen '${name}' wurde gefunden, handelt es sich eventuell um einen Tippfehler?`,
      expectedDictionaryGotDictionaries: (name) => `Statt dem erwarteten einzelnen Dictionary '${name}' wurden mehrere Dictionaries mit diesem Namen vorgefunden.`,
      expectedDictionaryGotField: (name) => `Statt dem erwarteten Dictionary '${name}' wurde ein Feld mit diesem Namen vorgefunden.`,
      expectedDictionaryGotList: (name) => `Statt dem erwarteten Dictionary '${name}' wurde eine Liste mit diesem Namen vorgefunden.`,
      expectedDictionaryGotSection: (name) => `Statt dem erwarteten Dictionary '${name}' wurden eine Sektion mit diesem Namen vorgefunden.`,
      expectedFieldGotDictionary: (name) => `Statt dem erwarteten Feld '${name}' wurde eine Dictionary mit diesem Namen vorgefunden.`,
      expectedFieldGotFields: (name) => `Statt dem erwarteten einzelnen Feld '${name}' wurden mehrere Felder mit diesem Namen vorgefunden.`,
      expectedFieldGotList: (name) => `Statt dem erwarteten Feld '${name}' wurde eine Liste mit diesem Namen vorgefunden.`,
      expectedFieldGotSection: (name) => `Statt dem erwarteten Feld '${name}' wurde eine Sektion mit diesem Namen vorgefunden.`,
      expectedListGotDictionary: (name) => `Statt der erwarteten Liste '${name}' wurde ein Dictionary mit diesem Namen vorgefunden.`,
      expectedListGotSection: (name) => `Statt der erwarteten Liste '${name}' wurde eine Sektion mit diesem Namen vorgefunden.`,
      expectedSectionGotDictionary: (name) => `Statt der erwarteten Sektion '${name}' wurde ein Dictionary mit diesem Namen vorgefunden.`,
      expectedSectionGotEmpty: (name) => `Statt der erwarteten Sektion '${name}' wurde ein leeres Element mit diesem Namen vorgefunden.`,
      expectedSectionGotField: (name) => `Statt der erwarteten Sektion '${name}' wurde ein Feld mit diesem Namen vorgefunden.`,
      expectedSectionGotList: (name) => `Statt der erwarteten Sektion '${name}' wurde eine Liste mit diesem Namen vorgefunden.`,
      expectedSectionGotSections: (name) => `Statt der erwarteten einzelnen Sektion '${name}' wurden mehrere Sektionen mit diesem Namen vorgefunden.`,
      expectedSectionsGotDictionary: (name) => `Es wurden nur Sektionen mit dem Namen '${name}' erwartet, jedoch ein Dictionary mit diesem Namen vorgefunden.`,
      expectedSectionsGotEmpty: (name) => `Es wurden nur Sektionen mit dem Namen '${name}' erwartet, jedoch ein leeres Element mit diesem Namen vorgefunden.`,
      expectedSectionsGotField: (name) => `Es wurden nur Sektionen mit dem Namen '${name}' erwartet, jedoch ein Feld mit diesem Namen vorgefunden.`,
      expectedSectionsGotList: (name) => `Es wurden nur Sektionen mit dem Namen '${name}' erwartet, jedoch eine Liste mit diesem Namen vorgefunden.`,
      genericError: (name) => `Es besteht ein Problem mit dem Wert des Elements '${name}'.`,
      maxCountNotMet: (name, actual, maximum) => `Die Liste '${name}' enthält ${actual} Einträge, darf aber nur maximal ${maximum} Einträge enthalten.`,
      minCountNotMet: (name, actual, minimum) => `Die Liste '${name}' enthält ${actual} Einträge, muss aber mindestens ${minimum} Einträge enthalten.`,
      missingDictionary: (name) => `Das Dictionary '${name}' fehlt - falls es angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`,
      missingDictionaryEntry: (name) => `Der Dictionary Eintrag '${name}' fehlt - falls er angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`,
      missingField: (name) => `Das Feld '${name}' fehlt - falls es angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`,
      missingList: (name) => `Die Liste '${name}' fehlt - falls sie angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`,
      missingSection: (name) => `Die Sektion '${name}' fehlt - falls sie angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`
    }
  },
  en: {
    elements: {
      dictionary: 'Dictionary',
      dictionaryEntry: 'Dictionary Entry',
      document: 'Document',
      empty: 'Empty Element',
      field: 'Field',
      list: 'List',
      listItem: 'List Item',
      section: 'Section',
      value: 'Value'
    },
    reporting: {
      contentHeader: 'Content',
      gutterHeader: 'Line'
    },
    tokenization: {
      escapedUnterminatedName: (line) => `In line ${line} the name of an element is escaped, but the escape sequence is not terminated until the end of the line.`,
      invalidLine: (line) => `Line ${line} does not follow any specified pattern.`,
      unterminatedBlock: (name, line) => `The block '${name}' starting in line ${line} is not terminated until the end of the document.`
    },
    analysis: {
      dictionaryEntryInField: (line) => `Line ${line} contains a dictionary entry inside a field.`,
      dictionaryEntryInList: (line) => `Line ${line} contains a dictionary entry inside a list.`,
      duplicateDictionaryEntryName: (dictionary_name, entry_name) => `The Dictionary '${dictionary_name}' contains two entries named '${entry_name}'.`,
      fieldAppendInDictionary: (line) => `Line ${line} contains an appendix (to a field) inside a dictionary.`,
      fieldAppendInList: (line) => `Line ${line} contains an appendix (to a field) inside a list.`,
      listItemInDictionary: (line) => `Line ${line} contains a list item inside a dictionary.`,
      listItemInField: (line) => `Line ${line} contains a list item inside a field.`,
      missingNameForDictionaryEntry: (line) => `Line ${line} contains a dictionary entry without a name for a dictionary being specified before.`,
      missingNameForFieldAppend: (line) => `Line ${line} contains an appendix to a field without a name for a field being specified before.`,
      missingNameForListItem: (line) => `Line ${line} contains a list item without a name for a list being specified before.`,
      sectionHierarchyLayerSkip: (line) => `Line ${line} starts a section that is more than one level deeper than the current one.`
    },
    resolution: {
      copyingBlockIntoDictionary: (line) => `In line ${line} a block is copied into a dictionary.`,
      copyingBlockIntoList: (line) => `In line ${line} a block is copied into a list.`,
      copyingBlockIntoSection: (line) => `In line ${line} a block is copied into a section.`,
      copyingDictionaryIntoField: (line) => `In line ${line} a dictionary is copied into a field.`,
      copyingDictionaryIntoList: (line) => `In line ${line} a dictionary is copied into a list.`,
      copyingDictionaryIntoSection: (line) => `In line ${line} a dictionary is copied into a section.`,
      copyingFieldIntoDictionary: (line) => `In line ${line} a field is copied into a dictionary.`,
      copyingFieldIntoList: (line) => `In line ${line} a field is copied into a list.`,
      copyingFieldIntoSection: (line) => `In line ${line} a field is copied into a section.`,
      copyingListIntoDictionary: (line) => `In line ${line} a list is copied into a dictionary.`,
      copyingListIntoField: (line) => `In line ${line} a list is copied into a field.`,
      copyingListIntoSection: (line) => `In line ${line} a list is copied into a section.`,
      copyingSectionIntoDictionary: (line) => `In line ${line} a section is copied into a dictionary.`,
      copyingSectionIntoEmpty: (line) => `In line ${line} a section is copied into an empty element.`,
      copyingSectionIntoField: (line) => `In line ${line} a section is copied into a field.`,
      copyingSectionIntoList: (line) => `In line ${line} a section is copied into a list.`,
      cyclicDependency: (line, name) => `In line ${line} '${name}' is copied into itself.`,
      multipleTemplatesFound: (line, name) => `In line ${line} it is not clear which of the elements named '${name}' should be copied.`,
      templateNotFound: (line, name) => `In line ${line} the element '${name}' should be copied, but it was not found.`
    },
    validation: {
      exactCountNotMet: (name, actual, expected) => `The list '${name}' contains ${actual} entries, but must contain exactly ${expected} entries.`,
      excessName: (name) => `An excess element named '${name}' was found, is it possibly a typo?`,
      expectedDictionaryGotDictionaries: (name) => `Instead of the expected single dictionary '${name}' several dictionaries with this name were found.`,
      expectedDictionaryGotField: (name) => `Instead of the expected dictionary '${name}' a field with this name was found.`,
      expectedDictionaryGotList: (name) => `Instead of the expected dictionary '${name}' a list with this name was found.`,
      expectedDictionaryGotSection: (name) => `Instead of the expected dictionary '${name}' a section with this name was found.`,
      expectedFieldGotDictionary: (name) => `Instead of the expected field '${name}' a dictionary with this name was found.`,
      expectedFieldGotFields: (name) => `Instead of the expected single field '${name}' several fields with this name were found.`,
      expectedFieldGotList: (name) => `Instead of the expected field '${name}' a list with this name was found.`,
      expectedFieldGotSection: (name) => `Instead of the expected field '${name}' a section with this name was found.`,
      expectedListGotDictionary: (name) => `Instead of the expected list '${name}' a dictionary with this name was found.`,
      expectedListGotSection: (name) => `Instead of the expected list '${name}' a section with this name was found.`,
      expectedSectionGotDictionary: (name) => `Instead of the expected section '${name}' a dictionary with this name was found.`,
      expectedSectionGotEmpty: (name) => `Instead of the expected section '${name}' an empty element with this name was found.`,
      expectedSectionGotField: (name) => `Instead of the expected section '${name}' a field with this name was found.`,
      expectedSectionGotList: (name) => `Instead of the expected section '${name}' a list with this name was found.`,
      expectedSectionGotSections: (name) => `Instead of the expected single section '${name}' several sections with this name were found.`,
      expectedSectionsGotDictionary: (name) => `Only sections with the name '${name}' were expected, but a dictionary with this name was found.`,
      expectedSectionsGotEmpty: (name) => `Only sections with the name '${name}' were expected, but an empty element with this name was found.`,
      expectedSectionsGotField: (name) => `Only sections with the name '${name}' were expected, but a field with this name was found.`,
      expectedSectionsGotList: (name) => `Only sections with the name '${name}' were expected, but a list with this name was found.`,
      genericError: (name) => `There is a problem with the value of the element '${name}'.`,
      maxCountNotMet: (name, actual, maximum) => `The list '${name}' contains ${actual} entries, but may only contain a maximum of ${maximum} entries.`,
      minCountNotMet: (name, actual, minimum) => `The list '${name}' contains ${actual} entries, but must contain at least ${minimum} entries.`,
      missingDictionary: (name) => `The dictionary '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`,
      missingDictionaryEntry: (name) => `The dictionary entry '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`,
      missingField: (name) => `The field '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`,
      missingList: (name) => `The list '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`,
      missingSection: (name) => `The section '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`
    }
  },
  es: {
    elements: {
      dictionary: 'Diccionario',
      dictionaryEntry: 'Entrada de Diccionario',
      document: 'Documento',
      empty: 'Elemento Vacío',
      field: 'Casilla',
      list: 'Lista',
      listItem: 'Entrada de Lista',
      section: 'Sección',
      value: 'Valor'
    },
    reporting: {
      contentHeader: 'Contenido',
      gutterHeader: 'Línea'
    },
    tokenization: {
      escapedUnterminatedName: (line) => `En la línea ${line}, el nombre de un elemento se escapa, pero esta secuencia de escape no termina hasta el final de la línea.`,
      invalidLine: (line) => `Línea ${line} no sigue un patrón especificado.`,
      unterminatedBlock: (name, line) => `El bloque '${name}' que comienza en la línea ${line} no termina hasta el final del documento.`
    },
    analysis: {
      dictionaryEntryInField: (line) => `Línea ${line} contiene una entrada de diccionario en medio de una casilla.`,
      dictionaryEntryInList: (line) => `Línea ${line} contiene una entrada de diccionario en medio de una lista.`,
      duplicateDictionaryEntryName: (dictionary_name, entry_name) => `El diccionario '${dictionary_name}' contiene dos entradas llamadas '${entry_name}'.`,
      fieldAppendInDictionary: (line) => `Línea ${line} contiene una extensión (de casilla) en medio de un diccionario.`,
      fieldAppendInList: (line) => `Línea ${line} contiene una extensión (de casilla) en medio de una lista.`,
      listItemInDictionary: (line) => `Línea ${line} contiene una entrada de lista en medio de un diccionario.`,
      listItemInField: (line) => `Línea ${line} contiene una entrada de lista en medio de una casilla.`,
      missingNameForDictionaryEntry: (line) => `Línea ${line} contiene una entrada de diccionario sin un nombre especificado para un diccionario antes.`,
      missingNameForFieldAppend: (line) => `Línea ${line} contiene una extensión de casilla sin un nombre para una casilla que se haya especificado antes.`,
      missingNameForListItem: (line) => `Línea ${line} contiene una entrada de lista sin nombre para una lista especificada antes.`,
      sectionHierarchyLayerSkip: (line) => `Línea ${line} inicia una sección que es más de un nivel más bajo el actual.`
    },
    resolution: {
      copyingBlockIntoDictionary: (line) => `En la línea ${line}, un bloque se copia en un diccionario.`,
      copyingBlockIntoList: (line) => `En la línea ${line}, un bloque se copia en una lista.`,
      copyingBlockIntoSection: (line) => `En la línea ${line}, un bloque se copia en una sección.`,
      copyingDictionaryIntoField: (line) => `En la línea ${line}, un diccionario se copia en una casilla.`,
      copyingDictionaryIntoList: (line) => `En la línea ${line}, un diccionario se copia en una lista.`,
      copyingDictionaryIntoSection: (line) => `En la línea ${line}, un diccionario se copia en una sección.`,
      copyingFieldIntoDictionary: (line) => `En la línea ${line}, una casilla se copia en un diccionario.`,
      copyingFieldIntoList: (line) => `En la línea ${line} una casilla se copia en una lista.`,
      copyingFieldIntoSection: (line) => `En la línea ${line}, una casilla se copia en una sección.`,
      copyingListIntoDictionary: (line) => `En la línea ${line}, una lista se copia en un diccionario.`,
      copyingListIntoField: (line) => `En la línea ${line}, una lista se copia en una casilla.`,
      copyingListIntoSection: (line) => `En la línea ${line}, una lista se copia en una sección.`,
      copyingSectionIntoDictionary: (line) => `En la línea ${line}, una sección se copia en un diccionario.`,
      copyingSectionIntoEmpty: (line) => `En la línea ${line} una sección se copia en un elemento vacío.`,
      copyingSectionIntoField: (line) => `En la línea ${line}, una sección se copia en una casilla.`,
      copyingSectionIntoList: (line) => `En la línea ${line} una sección se copia en una lista.`,
      cyclicDependency: (line, name) => `En la línea ${line} '${name}' se copia en sí mismo.`,
      multipleTemplatesFound: (line, name) => `En la línea ${line} no está claro cual de los elementos con el nombre '${name}' debe ser copiado.`,
      templateNotFound: (line, name) => `En la línea ${line} debe ser copiado el elemento '${name}', pero no se encontró.`
    },
    validation: {
      exactCountNotMet: (name, actual, expected) => `La lista '${name}' contiene ${actual} entradas, pero debe contener exactamente ${expected} entradas.`,
      excessName: (name) => `Un elemento sobrante con el nombre '${name}' se encontró, ¿es posiblemente un error tipográfico?`,
      expectedDictionaryGotDictionaries: (name) => `En lugar del único esperado diccionario '${name}' se encontraron varios diccionarios con este nombre.`,
      expectedDictionaryGotField: (name) => `En lugar del diccionario '${name}' esperado se encontró una casilla con este nombre.`,
      expectedDictionaryGotList: (name) => `En lugar del diccionario '${name}' esperado se encontró una lista con este nombre.`,
      expectedDictionaryGotSection: (name) => `En lugar del diccionario '${name}' esperado se encontró una sección con este nombre.`,
      expectedFieldGotDictionary: (name) => `En lugar de la casilla '${name}' esperada se encontró un diccionario con este nombre.`,
      expectedFieldGotFields: (name) => `En lugar de la única casilla esperada '${name}' se encontraron varias casillas con este nombre.`,
      expectedFieldGotList: (name) => `En lugar de la casilla '${name}' esperada se encontró una lista con este nombre.`,
      expectedFieldGotSection: (name) => `En lugar de la casilla '${name}' esperada se encontró una sección con este nombre.`,
      expectedListGotDictionary: (name) => `En lugar de la lista '${name}' esperada se encontró un diccionario con este nombre.`,
      expectedListGotSection: (name) => `En lugar de la lista '${name}' esperada se encontró una sección con este nombre.`,
      expectedSectionGotDictionary: (name) => `En lugar de la sección '${name}' esperada se encontró un diccionario con este nombre.`,
      expectedSectionGotEmpty: (name) => `En lugar de la sección '${name}' esperada se encontró un elemento vacío con este nombre.`,
      expectedSectionGotField: (name) => `En lugar de la sección '${name}' esperada se encontró una casilla con este nombre.`,
      expectedSectionGotList: (name) => `En lugar de la sección '${name}' esperada se encontró una lista con este nombre.`,
      expectedSectionGotSections: (name) => `En lugar de la única sección esperada '${name}' se encontraron varias secciones con este nombre.`,
      expectedSectionsGotDictionary: (name) => `Solo se esperaban secciones con el nombre '${name}', pero se encontró un diccionario con este nombre.`,
      expectedSectionsGotEmpty: (name) => `Solo se esperaban secciones con el nombre '${name}', pero se encontró un elemento vacío con este nombre.`,
      expectedSectionsGotField: (name) => `Solo se esperaban secciones con el nombre '${name}', pero se encontró una casilla con este nombre.`,
      expectedSectionsGotList: (name) => `Solo se esperaban secciones con el nombre '${name}', pero se encontró una lista con este nombre.`,
      genericError: (name) => `Hay un problema con el valor del elemento '${name}'.`,
      maxCountNotMet: (name, actual, maximum) => `La lista '${name}' contiene ${actual} entradas, pero debe contener un máximo de ${maximum} entradas.`,
      minCountNotMet: (name, actual, minimum) => `La lista '${name}' contiene ${actual} entradas, pero debe contener al menos ${minimum} entradas.`,
      missingDictionary: (name) => `Falta la lista '${name}' - Si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`,
      missingDictionaryEntry: (name) => `Falta la entrada de diccionario '${name}' - Si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`,
      missingField: (name) => `Falta la casilla '${name}' - Si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`,
      missingList: (name) => `Falta la lista '${name}' - Si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`,
      missingSection: (name) => `Falta la sección '${name}' - Si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`
    }
  }
};
