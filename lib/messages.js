// This code was auto-generated on Sat Jul 21 2018 09:50:30 GMT+0200 (Central European Summer Time)
// by the eno-locales project (https://github.com/eno-lang/eno-locales/)
//
// eno-locales
// version 0.8.0

module.exports = {
  de: {
    elements: {
      document: 'Dokument',
      empty: 'Leeres Element',
      field: 'Feld',
      fieldset: 'Fieldset',
      fieldsetEntry: 'Fieldset Eintrag',
      list: 'Liste',
      listItem: 'Listeneintrag',
      section: 'Sektion',
      value: 'Wert'
    },
    reporting: {
      contentHeader: 'Inhalt',
      gutterHeader: 'Zeile'
    },
    tokenization: {
      invalidLine: (line) => `Zeile ${line} folgt keinem spezifierten Muster.`,
      unterminatedBlock: (name, line) => `Der Block '${name}' der in Zeile ${line} beginnt wird bis zum Ende des Dokuments nicht mehr beendet.`,
      unterminatedEscapedName: (line) => `In Zeile ${line} wird der Name eines Elements escaped, jedoch wird diese Escape Sequenz bis zum Ende der Zeile nicht mehr beendet.`
    },
    analysis: {
      duplicateFieldsetEntryName: (fieldset_name, entry_name) => `Das Fieldset '${fieldset_name}' enthält zwei Einträge mit dem Namen '${entry_name}'.`,
      fieldsetEntryInField: (line) => `Zeile ${line} enthält einen Fieldset Eintrag in einem Feld.`,
      fieldsetEntryInList: (line) => `Zeile ${line} enthält einen Fieldset Eintrag in einer Liste.`,
      listItemInField: (line) => `Zeile ${line} enthält einen Listeneintrag in einem Feld`,
      listItemInFieldset: (line) => `Zeile ${line} enthält einen Listeneintrag in einem Fieldset`,
      missingElementForContinuation: (line) => `Zeile ${line} enthält eine Fortsetzung ohne dass davor ein fortsetzbares Element angegeben wurde.`,
      missingNameForFieldsetEntry: (line) => `Zeile ${line} enthält einen Fieldset Eintrag ohne dass davor ein Name für ein Fieldset angegeben wurde.`,
      missingNameForListItem: (line) => `Zeile ${line} enthält einen Listeneintrag ohne dass davor ein Name für eine Liste angegeben wurde.`,
      sectionHierarchyLayerSkip: (line) => `Zeile ${line} beginnt eine Sektion die mehr als eine Ebene tiefer liegt als die aktuelle.`
    },
    resolution: {
      copyingBlockIntoFieldset: (line) => `In Zeile ${line} wird ein Block in ein Fieldset kopiert.`,
      copyingBlockIntoList: (line) => `In Zeile ${line} wird ein Block in eine Liste kopiert.`,
      copyingBlockIntoSection: (line) => `In Zeile ${line} wird ein Block in eine Sektion kopiert.`,
      copyingFieldIntoFieldset: (line) => `In Zeile ${line} wird ein Feld in ein Fieldset kopiert.`,
      copyingFieldIntoList: (line) => `In Zeile ${line} wird ein Feld in eine Liste kopiert.`,
      copyingFieldIntoSection: (line) => `In Zeile ${line} wird ein Feld in eine Sektion kopiert.`,
      copyingFieldsetIntoField: (line) => `In Zeile ${line} wird ein Fieldset in ein Feld kopiert.`,
      copyingFieldsetIntoList: (line) => `In Zeile ${line} wird ein Fieldset in eine Liste kopiert.`,
      copyingFieldsetIntoSection: (line) => `In Zeile ${line} wird ein Fieldset in eine Sektion kopiert.`,
      copyingListIntoField: (line) => `In Zeile ${line} wird eine Liste in ein Feld kopiert.`,
      copyingListIntoFieldset: (line) => `In Zeile ${line} wird eine Liste in ein Fieldset kopiert.`,
      copyingListIntoSection: (line) => `In Zeile ${line} wird eine Liste in eine Sektion kopiert.`,
      copyingSectionIntoEmpty: (line) => `In Zeile ${line} wird eine Sektion in ein leeres Element kopiert.`,
      copyingSectionIntoField: (line) => `In Zeile ${line} wird eine Sektion in ein Feld kopiert.`,
      copyingSectionIntoFieldset: (line) => `In Zeile ${line} wird eine Sektion in ein Fieldset kopiert.`,
      copyingSectionIntoList: (line) => `In Zeile ${line} wird eine Sektion in eine Liste kopiert.`,
      cyclicDependency: (line, name) => `In Zeile ${line} wird '${name}' in sich selbst kopiert.`,
      multipleTemplatesFound: (line, name) => `In Zeile ${line} ist nicht klar welches der Elemente mit dem Namen '${name}' kopiert werden soll.`,
      templateNotFound: (line, name) => `In Zeile ${line} soll das Element '${name}' kopiert werden, es wurde aber nicht gefunden.`
    },
    validation: {
      exactCountNotMet: (name, actual, expected) => `Die Liste '${name}' enthält ${actual} Einträge, muss aber genau ${expected} Einträge enthalten.`,
      excessName: (name) => `Ein überschüssiges Element mit dem Namen '${name}' wurde gefunden, handelt es sich eventuell um einen Tippfehler?`,
      expectedElementGotElements: (name) => `Statt dem erwarteten einzelnen Element '${name}' wurden mehrere Elemente mit diesem Namen vorgefunden.`,
      expectedFieldGotFields: (name) => `Statt dem erwarteten einzelnen Feld '${name}' wurden mehrere Felder mit diesem Namen vorgefunden.`,
      expectedFieldGotFieldset: (name) => `Statt dem erwarteten Feld '${name}' wurde ein Fieldset mit diesem Namen vorgefunden.`,
      expectedFieldGotList: (name) => `Statt dem erwarteten Feld '${name}' wurde eine Liste mit diesem Namen vorgefunden.`,
      expectedFieldGotSection: (name) => `Statt dem erwarteten Feld '${name}' wurde eine Sektion mit diesem Namen vorgefunden.`,
      expectedFieldsGotFieldset: (name) => `Es wurden nur Felder mit dem Namen '${name}' erwartet, jedoch ein Fieldset mit diesem Namen vorgefunden.`,
      expectedFieldsGotList: (name) => `Es wurden nur Felder mit dem Namen '${name}' erwartet, jedoch eine Liste mit diesem Namen vorgefunden.`,
      expectedFieldsGotSection: (name) => `Es wurden nur Felder mit dem Namen '${name}' erwartet, jedoch eine Sektion mit diesem Namen vorgefunden.`,
      expectedFieldsetGotField: (name) => `Statt dem erwarteten Fieldset '${name}' wurde ein Feld mit diesem Namen vorgefunden.`,
      expectedFieldsetGotFieldsets: (name) => `Statt dem erwarteten einzelnen Fieldset '${name}' wurden mehrere Fieldsets mit diesem Namen vorgefunden.`,
      expectedFieldsetGotList: (name) => `Statt dem erwarteten Fieldset '${name}' wurde eine Liste mit diesem Namen vorgefunden.`,
      expectedFieldsetGotSection: (name) => `Statt dem erwarteten Fieldset '${name}' wurde eine Sektion mit diesem Namen vorgefunden.`,
      expectedFieldsetsGotField: (name) => `Es wurden nur Fieldsets mit dem Namen '${name}' erwartet, jedoch ein Feld mit diesem Namen vorgefunden.`,
      expectedFieldsetsGotList: (name) => `Es wurden nur Fieldsets mit dem Namen '${name}' erwartet, jedoch eine Liste mit diesem Namen vorgefunden.`,
      expectedFieldsetsGotSection: (name) => `Es wurden nur Fieldsets mit dem Namen '${name}' erwartet, jedoch eine Sektion mit diesem Namen vorgefunden.`,
      expectedListGotField: (name) => `Statt der erwarteten Liste '${name}' wurde ein Feld mit diesem Namen vorgefunden.`,
      expectedListGotFieldset: (name) => `Statt der erwarteten Liste '${name}' wurde ein Fieldset mit diesem Namen vorgefunden.`,
      expectedListGotLists: (name) => `Statt der erwarteten einzelnen Liste '${name}' wurden mehrere Listen mit diesem Namen vorgefunden.`,
      expectedListGotSection: (name) => `Statt der erwarteten Liste '${name}' wurde eine Sektion mit diesem Namen vorgefunden.`,
      expectedListsGotField: (name) => `Es wurden nur Listen mit dem Namen '${name}' erwartet, jedoch ein Feld mit diesem Namen vorgefunden.`,
      expectedListsGotFieldset: (name) => `Es wurden nur Listen mit dem Namen '${name}' erwartet, jedoch ein Fieldset mit diesem Namen vorgefunden.`,
      expectedListsGotSection: (name) => `Es wurden nur Listen mit dem Namen '${name}' erwartet, jedoch eine Sektion mit diesem Namen vorgefunden.`,
      expectedSectionGotEmpty: (name) => `Statt der erwarteten Sektion '${name}' wurde ein leeres Element mit diesem Namen vorgefunden.`,
      expectedSectionGotField: (name) => `Statt der erwarteten Sektion '${name}' wurde ein Feld mit diesem Namen vorgefunden.`,
      expectedSectionGotFieldset: (name) => `Statt der erwarteten Sektion '${name}' wurde ein Fieldset mit diesem Namen vorgefunden.`,
      expectedSectionGotList: (name) => `Statt der erwarteten Sektion '${name}' wurde eine Liste mit diesem Namen vorgefunden.`,
      expectedSectionGotSections: (name) => `Statt der erwarteten einzelnen Sektion '${name}' wurden mehrere Sektionen mit diesem Namen vorgefunden.`,
      expectedSectionsGotEmpty: (name) => `Es wurden nur Sektionen mit dem Namen '${name}' erwartet, jedoch ein leeres Element mit diesem Namen vorgefunden.`,
      expectedSectionsGotField: (name) => `Es wurden nur Sektionen mit dem Namen '${name}' erwartet, jedoch ein Feld mit diesem Namen vorgefunden.`,
      expectedSectionsGotFieldset: (name) => `Es wurden nur Sektionen mit dem Namen '${name}' erwartet, jedoch ein Fieldset mit diesem Namen vorgefunden.`,
      expectedSectionsGotList: (name) => `Es wurden nur Sektionen mit dem Namen '${name}' erwartet, jedoch eine Liste mit diesem Namen vorgefunden.`,
      genericError: (name) => `Es besteht ein Problem mit dem Wert des Elements '${name}'.`,
      maxCountNotMet: (name, actual, maximum) => `Die Liste '${name}' enthält ${actual} Einträge, darf aber nur maximal ${maximum} Einträge enthalten.`,
      minCountNotMet: (name, actual, minimum) => `Die Liste '${name}' enthält ${actual} Einträge, muss aber mindestens ${minimum} Einträge enthalten.`,
      missingElement: (name) => `Das Element '${name}' fehlt - falls es angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`,
      missingField: (name) => `Das Feld '${name}' fehlt - falls es angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`,
      missingFieldValue: (name) => `Das Feld '${name}' muss einen Wert enthalten.`,
      missingFieldset: (name) => `Das Fieldset '${name}' fehlt - falls es angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`,
      missingFieldsetEntry: (name) => `Der Fieldset Eintrag '${name}' fehlt - falls er angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`,
      missingFieldsetEntryValue: (name) => `Der Fieldset Eintrag '${name}' muss einen Wert enthalten.`,
      missingList: (name) => `Die Liste '${name}' fehlt - falls sie angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`,
      missingListItemValue: (name) => `Die Liste '${name}' darf keine leeren Einträge enthalten.`,
      missingSection: (name) => `Die Sektion '${name}' fehlt - falls sie angegeben wurde eventuell nach Tippfehlern Ausschau halten und auch die Gross/Kleinschreibung beachten.`
    },
    loaders: {
      invalidBoolean: (name) => `'${name}' muss einen Boolean Wert enthalten - erlaubte Werte sind 'true', 'false', 'yes' und 'no'.`,
      invalidColor: (name) => `'${name}' muss eine Farbe enthalten, zum Beispiel '#B6D918', '#fff' oder '#01b'.`,
      invalidDate: (name) => `'${name}' muss ein valides Datum enhalten, zum Beispiel '1993-11-18'.`,
      invalidDatetime: (name) => `'${name}' muss ein valides Datum oder Datum und Zeit enhalten, zum Beispiel '1961-01-22' oder '1989-11-09T19:17Z' (siehe https://www.w3.org/TR/NOTE-datetime).`,
      invalidEmail: (name) => `'${name}' muss eine valide Email Adresse enthalten, zum Beispiel 'jane.doe@eno-lang.org'.`,
      invalidFloat: (name) => `'${name}' muss eine Dezimalzahl enthalten, zum Beispiel '13.0', '-9.159' oder '42'.`,
      invalidInteger: (name) => `'${name}' muss eine Ganzzahl enthalten, zum Beispiel '42' oder '-21'.`,
      invalidJson: (name, error) => `'${name}' muss valides JSON enthalten - die Meldung des Parsers war: '${error}'.`,
      invalidLatLng: (name) => `'${name}' muss ein valides Breiten-/Längengrad Koordinatenpaar enthalten, zum Beispiel '48.2093723, 16.356099'.`,
      invalidUrl: (name) => `'${name}' muss eine valide URL enhalten, zum Beispiel 'https://eno-lang.org'.`
    }
  },
  en: {
    elements: {
      document: 'Document',
      empty: 'Empty Element',
      field: 'Field',
      fieldset: 'Fieldset',
      fieldsetEntry: 'Fieldset Entry',
      list: 'List',
      listItem: 'List Item',
      section: 'Section',
      value: 'Value'
    },
    reporting: {
      contentHeader: 'Content',
      gutterHeader: 'Line'
    },
    tokenization: {
      invalidLine: (line) => `Line ${line} does not follow any specified pattern.`,
      unterminatedBlock: (name, line) => `The block '${name}' starting in line ${line} is not terminated until the end of the document.`,
      unterminatedEscapedName: (line) => `In line ${line} the name of an element is escaped, but the escape sequence is not terminated until the end of the line.`
    },
    analysis: {
      duplicateFieldsetEntryName: (fieldset_name, entry_name) => `The fieldset '${fieldset_name}' contains two entries named '${entry_name}'.`,
      fieldsetEntryInField: (line) => `Line ${line} contains a fieldset entry inside a field.`,
      fieldsetEntryInList: (line) => `Line ${line} contains a fieldset entry inside a list.`,
      listItemInField: (line) => `Line ${line} contains a list item inside a field.`,
      listItemInFieldset: (line) => `Line ${line} contains a list item inside a fieldset.`,
      missingElementForContinuation: (line) => `Line ${line} contains a continuation without any continuable element being specified before.`,
      missingNameForFieldsetEntry: (line) => `Line ${line} contains a fieldset entry without a name for a fieldset being specified before.`,
      missingNameForListItem: (line) => `Line ${line} contains a list item without a name for a list being specified before.`,
      sectionHierarchyLayerSkip: (line) => `Line ${line} starts a section that is more than one level deeper than the current one.`
    },
    resolution: {
      copyingBlockIntoFieldset: (line) => `In line ${line} a block is copied into a fieldset.`,
      copyingBlockIntoList: (line) => `In line ${line} a block is copied into a list.`,
      copyingBlockIntoSection: (line) => `In line ${line} a block is copied into a section.`,
      copyingFieldIntoFieldset: (line) => `In line ${line} a field is copied into a fieldset.`,
      copyingFieldIntoList: (line) => `In line ${line} a field is copied into a list.`,
      copyingFieldIntoSection: (line) => `In line ${line} a field is copied into a section.`,
      copyingFieldsetIntoField: (line) => `In line ${line} a fieldset is copied into a field.`,
      copyingFieldsetIntoList: (line) => `In line ${line} a fieldset is copied into a list.`,
      copyingFieldsetIntoSection: (line) => `In line ${line} a fieldset is copied into a section.`,
      copyingListIntoField: (line) => `In line ${line} a list is copied into a field.`,
      copyingListIntoFieldset: (line) => `In line ${line} a list is copied into a fieldset.`,
      copyingListIntoSection: (line) => `In line ${line} a list is copied into a section.`,
      copyingSectionIntoEmpty: (line) => `In line ${line} a section is copied into an empty element.`,
      copyingSectionIntoField: (line) => `In line ${line} a section is copied into a field.`,
      copyingSectionIntoFieldset: (line) => `In line ${line} a section is copied into a fieldset.`,
      copyingSectionIntoList: (line) => `In line ${line} a section is copied into a list.`,
      cyclicDependency: (line, name) => `In line ${line} '${name}' is copied into itself.`,
      multipleTemplatesFound: (line, name) => `In line ${line} it is not clear which of the elements named '${name}' should be copied.`,
      templateNotFound: (line, name) => `In line ${line} the element '${name}' should be copied, but it was not found.`
    },
    validation: {
      exactCountNotMet: (name, actual, expected) => `The list '${name}' contains ${actual} items, but must contain exactly ${expected} items.`,
      excessName: (name) => `An excess element named '${name}' was found, is it possibly a typo?`,
      expectedElementGotElements: (name) => `Instead of the expected single element '${name}' several elements with this name were found.`,
      expectedFieldGotFields: (name) => `Instead of the expected single field '${name}' several fields with this name were found.`,
      expectedFieldGotFieldset: (name) => `Instead of the expected field '${name}' a fieldset with this name was found.`,
      expectedFieldGotList: (name) => `Instead of the expected field '${name}' a list with this name was found.`,
      expectedFieldGotSection: (name) => `Instead of the expected field '${name}' a section with this name was found.`,
      expectedFieldsGotFieldset: (name) => `Only fields with the name '${name}' were expected, but a fieldset with this name was found.`,
      expectedFieldsGotList: (name) => `Only fields with the name '${name}' were expected, but a list with this name was found.`,
      expectedFieldsGotSection: (name) => `Only fields with the name '${name}' were expected, but a section with this name was found.`,
      expectedFieldsetGotField: (name) => `Instead of the expected fieldset '${name}' a field with this name was found.`,
      expectedFieldsetGotFieldsets: (name) => `Instead of the expected single fieldset '${name}' several fieldsets with this name were found.`,
      expectedFieldsetGotList: (name) => `Instead of the expected fieldset '${name}' a list with this name was found.`,
      expectedFieldsetGotSection: (name) => `Instead of the expected fieldset '${name}' a section with this name was found.`,
      expectedFieldsetsGotField: (name) => `Only fieldsets with the name '${name}' were expected, but a field with this name was found.`,
      expectedFieldsetsGotList: (name) => `Only fieldsets with the name '${name}' were expected, but a list with this name was found.`,
      expectedFieldsetsGotSection: (name) => `Only fieldsets with the name '${name}' were expected, but a section with this name was found.`,
      expectedListGotField: (name) => `Instead of the expected list '${name}' a field with this name was found.`,
      expectedListGotFieldset: (name) => `Instead of the expected list '${name}' a fieldset with this name was found.`,
      expectedListGotLists: (name) => `Instead of the expected single list '${name}' several lists with this name were found.`,
      expectedListGotSection: (name) => `Instead of the expected list '${name}' a section with this name was found.`,
      expectedListsGotField: (name) => `Only lists with the name '${name}' were expected, but a field with this name was found.`,
      expectedListsGotFieldset: (name) => `Only lists with the name '${name}' were expected, but a fieldset with this name was found.`,
      expectedListsGotSection: (name) => `Only lists with the name '${name}' were expected, but a section with this name was found.`,
      expectedSectionGotEmpty: (name) => `Instead of the expected section '${name}' an empty element with this name was found.`,
      expectedSectionGotField: (name) => `Instead of the expected section '${name}' a field with this name was found.`,
      expectedSectionGotFieldset: (name) => `Instead of the expected section '${name}' a fieldset with this name was found.`,
      expectedSectionGotList: (name) => `Instead of the expected section '${name}' a list with this name was found.`,
      expectedSectionGotSections: (name) => `Instead of the expected single section '${name}' several sections with this name were found.`,
      expectedSectionsGotEmpty: (name) => `Only sections with the name '${name}' were expected, but an empty element with this name was found.`,
      expectedSectionsGotField: (name) => `Only sections with the name '${name}' were expected, but a field with this name was found.`,
      expectedSectionsGotFieldset: (name) => `Only sections with the name '${name}' were expected, but a fieldset with this name was found.`,
      expectedSectionsGotList: (name) => `Only sections with the name '${name}' were expected, but a list with this name was found.`,
      genericError: (name) => `There is a problem with the value of the element '${name}'.`,
      maxCountNotMet: (name, actual, maximum) => `The list '${name}' contains ${actual} items, but may only contain a maximum of ${maximum} items.`,
      minCountNotMet: (name, actual, minimum) => `The list '${name}' contains ${actual} items, but must contain at least ${minimum} items.`,
      missingElement: (name) => `The element '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`,
      missingField: (name) => `The field '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`,
      missingFieldValue: (name) => `The field '${name}' must contain a value.`,
      missingFieldset: (name) => `The fieldset '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`,
      missingFieldsetEntry: (name) => `The fieldset entry '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`,
      missingFieldsetEntryValue: (name) => `The fieldset entry '${name}' must contain a value.`,
      missingList: (name) => `The list '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`,
      missingListItemValue: (name) => `The list '${name}' may not contain empty items.`,
      missingSection: (name) => `The section '${name}' is missing - in case it has been specified look for typos and also check for correct capitalization.`
    },
    loaders: {
      invalidBoolean: (name) => `'${name}' must contain a boolean - allowed values are 'true', 'false', 'yes' and 'no'.`,
      invalidColor: (name) => `'${name}' must contain a color, for instance '#B6D918', '#fff' or '#01b'.`,
      invalidDate: (name) => `'${name}' must contain a valid date, for instance '1993-11-18'.`,
      invalidDatetime: (name) => `'${name}' must contain a valid date or date and time, for instance '1961-01-22' or '1989-11-09T19:17Z' (see https://www.w3.org/TR/NOTE-datetime).`,
      invalidEmail: (name) => `'${name}' must contain a valid email address, for instance 'jane.doe@eno-lang.org'.`,
      invalidFloat: (name) => `'${name}' must contain a decimal number, for instance '13.0', '-9.159' or '42'.`,
      invalidInteger: (name) => `'${name}' must contain an integer, for instance '42' or '-21'.`,
      invalidJson: (name, error) => `'${name}' must contain valid JSON - the parser returned: '${error}'.`,
      invalidLatLng: (name) => `'${name}' must contain a valid latitude/longitude coordinate pair, for instance '48.2093723, 16.356099'.`,
      invalidUrl: (name) => `'${name}' must contain a valid URL, for instance 'https://eno-lang.org'.`
    }
  },
  es: {
    elements: {
      document: 'Documento',
      empty: 'Elemento Vacío',
      field: 'Casilla',
      fieldset: 'Collecíon de Casillas',
      fieldsetEntry: 'Casilla de Collecíon',
      list: 'Lista',
      listItem: 'Entrada de Lista',
      section: 'Sección',
      value: 'Valor'
    },
    reporting: {
      contentHeader: 'Contenido',
      gutterHeader: 'Línea'
    },
    tokenization: {
      invalidLine: (line) => `Línea ${line} no sigue un patrón especificado.`,
      unterminatedBlock: (name, line) => `El bloque '${name}' que comienza en la línea ${line} no termina hasta el final del documento.`,
      unterminatedEscapedName: (line) => `En la línea ${line}, el nombre de un elemento se escapa, pero esta secuencia de escape no termina hasta el final de la línea.`
    },
    analysis: {
      duplicateFieldsetEntryName: (fieldset_name, entry_name) => `La collecíon de casillas '${fieldset_name}' contiene dos casillas llamadas '${entry_name}'.`,
      fieldsetEntryInField: (line) => `Línea ${line} contiene una casilla de collecíon en medio de una casilla.`,
      fieldsetEntryInList: (line) => `Línea ${line} contiene una casilla de collecíon en medio de una lista.`,
      listItemInField: (line) => `Línea ${line} contiene una entrada de lista en medio de una casilla.`,
      listItemInFieldset: (line) => `Línea ${line} contiene una entrada de lista en medio de una collecíon de casillas.`,
      missingElementForContinuation: (line) => `Línea ${line} contiene una continuacíon sin un elemento que se puede continuar especificado antes.`,
      missingNameForFieldsetEntry: (line) => `Línea ${line} contiene una casilla de collecíon sin un nombre especificado para una collecíon de casillas antes.`,
      missingNameForListItem: (line) => `Línea ${line} contiene una entrada de lista sin nombre para una lista especificada antes.`,
      sectionHierarchyLayerSkip: (line) => `Línea ${line} inicia una sección que es más de un nivel más bajo el actual.`
    },
    resolution: {
      copyingBlockIntoFieldset: (line) => `En la línea ${line}, un bloque se copia en una collecíon de casillas.`,
      copyingBlockIntoList: (line) => `En la línea ${line}, un bloque se copia en una lista.`,
      copyingBlockIntoSection: (line) => `En la línea ${line}, un bloque se copia en una sección.`,
      copyingFieldIntoFieldset: (line) => `En la línea ${line}, una casilla se copia en una collecíon de casillas.`,
      copyingFieldIntoList: (line) => `En la línea ${line} una casilla se copia en una lista.`,
      copyingFieldIntoSection: (line) => `En la línea ${line}, una casilla se copia en una sección.`,
      copyingFieldsetIntoField: (line) => `En la línea ${line}, una collecíon de casillas se copia en una casilla.`,
      copyingFieldsetIntoList: (line) => `En la línea ${line}, una collecíon de casillas se copia en una lista.`,
      copyingFieldsetIntoSection: (line) => `En la línea ${line}, una collecíon de casillas se copia en una sección.`,
      copyingListIntoField: (line) => `En la línea ${line}, una lista se copia en una casilla.`,
      copyingListIntoFieldset: (line) => `En la línea ${line}, una lista se copia en una collecíon de casillas.`,
      copyingListIntoSection: (line) => `En la línea ${line}, una lista se copia en una sección.`,
      copyingSectionIntoEmpty: (line) => `En la línea ${line} una sección se copia en un elemento vacío.`,
      copyingSectionIntoField: (line) => `En la línea ${line}, una sección se copia en una casilla.`,
      copyingSectionIntoFieldset: (line) => `En la línea ${line}, una sección se copia en una collecíon de casillas.`,
      copyingSectionIntoList: (line) => `En la línea ${line} una sección se copia en una lista.`,
      cyclicDependency: (line, name) => `En la línea ${line} '${name}' se copia en sí mismo.`,
      multipleTemplatesFound: (line, name) => `En la línea ${line} no está claro cual de los elementos con el nombre '${name}' debe ser copiado.`,
      templateNotFound: (line, name) => `En la línea ${line} debe ser copiado el elemento '${name}', pero no se encontró.`
    },
    validation: {
      exactCountNotMet: (name, actual, expected) => `La lista '${name}' contiene ${actual} entradas, pero debe contener exactamente ${expected} entradas.`,
      excessName: (name) => `Un elemento sobrante con el nombre '${name}' se encontró, ¿es posiblemente un error tipográfico?`,
      expectedElementGotElements: (name) => `En lugar del único esperado elemento '${name}' se encontraron varios elementos con este nombre.`,
      expectedFieldGotFields: (name) => `En lugar de la única casilla esperada '${name}' se encontraron varias casillas con este nombre.`,
      expectedFieldGotFieldset: (name) => `En lugar de la casilla '${name}' esperada se encontró una collecíon de casillas con este nombre.`,
      expectedFieldGotList: (name) => `En lugar de la casilla '${name}' esperada se encontró una lista con este nombre.`,
      expectedFieldGotSection: (name) => `En lugar de la casilla '${name}' esperada se encontró una sección con este nombre.`,
      expectedFieldsGotFieldset: (name) => `Solo se esperaban casillas con el nombre '${name}', pero se encontró una collecíon de casillas con este nombre.`,
      expectedFieldsGotList: (name) => `Solo se esperaban casillas con el nombre '${name}', pero se encontró una lista con este nombre.`,
      expectedFieldsGotSection: (name) => `Solo se esperaban casillas con el nombre '${name}', pero se encontró una sección con este nombre.`,
      expectedFieldsetGotField: (name) => `En lugar de la collecíon de casillas '${name}' esperada se encontró una casilla con este nombre.`,
      expectedFieldsetGotFieldsets: (name) => `En lugar de la única esperada collecíon de casillas '${name}' se encontraron varias collecíones de casillas con este nombre.`,
      expectedFieldsetGotList: (name) => `En lugar de la collecíon de casillas '${name}' esperada se encontró una lista con este nombre.`,
      expectedFieldsetGotSection: (name) => `En lugar de la collecíon de casillas '${name}' esperada se encontró una sección con este nombre.`,
      expectedFieldsetsGotField: (name) => `Solo se esperaban collecíones de casillas con el nombre '${name}', pero se encontró una casilla con este nombre.`,
      expectedFieldsetsGotList: (name) => `Solo se esperaban collecíones de casillas con el nombre '${name}', pero se encontró una lista con este nombre.`,
      expectedFieldsetsGotSection: (name) => `Solo se esperaban collecíones de casillas con el nombre '${name}', pero se encontró una sección con este nombre.`,
      expectedListGotField: (name) => `En lugar de la lista '${name}' esperada se encontró una casilla con este nombre.`,
      expectedListGotFieldset: (name) => `En lugar de la lista '${name}' esperada se encontró una collecíon de casillas con este nombre.`,
      expectedListGotLists: (name) => `En lugar de la única lista esperada '${name}' se encontraron varias listas con este nombre.`,
      expectedListGotSection: (name) => `En lugar de la lista '${name}' esperada se encontró una sección con este nombre.`,
      expectedListsGotField: (name) => `Solo se esperaban listas con el nombre '${name}', pero se encontró una casilla con este nombre.`,
      expectedListsGotFieldset: (name) => `Solo se esperaban listas con el nombre '${name}', pero se encontró una collecíon de casillas con este nombre.`,
      expectedListsGotSection: (name) => `Solo se esperaban listas con el nombre '${name}', pero se encontró una sección con este nombre.`,
      expectedSectionGotEmpty: (name) => `En lugar de la sección '${name}' esperada se encontró un elemento vacío con este nombre.`,
      expectedSectionGotField: (name) => `En lugar de la sección '${name}' esperada se encontró una casilla con este nombre.`,
      expectedSectionGotFieldset: (name) => `En lugar de la sección '${name}' esperada se encontró una collecíon de casillas con este nombre.`,
      expectedSectionGotList: (name) => `En lugar de la sección '${name}' esperada se encontró una lista con este nombre.`,
      expectedSectionGotSections: (name) => `En lugar de la única sección esperada '${name}' se encontraron varias secciones con este nombre.`,
      expectedSectionsGotEmpty: (name) => `Solo se esperaban secciones con el nombre '${name}', pero se encontró un elemento vacío con este nombre.`,
      expectedSectionsGotField: (name) => `Solo se esperaban secciones con el nombre '${name}', pero se encontró una casilla con este nombre.`,
      expectedSectionsGotFieldset: (name) => `Solo se esperaban secciones con el nombre '${name}', pero se encontró una collecíon de casillas con este nombre.`,
      expectedSectionsGotList: (name) => `Solo se esperaban secciones con el nombre '${name}', pero se encontró una lista con este nombre.`,
      genericError: (name) => `Hay un problema con el valor del elemento '${name}'.`,
      maxCountNotMet: (name, actual, maximum) => `La lista '${name}' contiene ${actual} entradas, pero debe contener un máximo de ${maximum} entradas.`,
      minCountNotMet: (name, actual, minimum) => `La lista '${name}' contiene ${actual} entradas, pero debe contener al menos ${minimum} entradas.`,
      missingElement: (name) => `Falta el elemento '${name}' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`,
      missingField: (name) => `Falta la casilla '${name}' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`,
      missingFieldValue: (name) => `La casilla '${name}' debe contener un valor.`,
      missingFieldset: (name) => `Falta la collecíon de casillas '${name}' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`,
      missingFieldsetEntry: (name) => `Falta la casilla de collecíon '${name}' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`,
      missingFieldsetEntryValue: (name) => `La casilla de collecíon '${name}' debe contener un valor.`,
      missingList: (name) => `Falta la lista '${name}' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`,
      missingListItemValue: (name) => `La lista '${name}' no debe contener entradas vacías.`,
      missingSection: (name) => `Falta la sección '${name}' - si se proporcionó, mira por errores ortográficos y también distingue entre mayúsculas y minúsculas.`
    },
    loaders: {
      invalidBoolean: (name) => `'${name}' debe contener un valor booleano - valores permitidos son 'true', 'false', 'yes' y 'no'.`,
      invalidColor: (name) => `'${name}' debe contener un color, por ejemplo '#B6D918', '#fff' o '#01b'.`,
      invalidDate: (name) => `'${name}' debe contener una valida fecha, por ejemplo '1993-11-18'.`,
      invalidDatetime: (name) => `'${name}' debe contener una valida fecha o fecha y hora, por ejemplo '1961-01-22' o '1989-11-09T19:17Z' (vea https://www.w3.org/TR/NOTE-datetime).`,
      invalidEmail: (name) => `'${name}' debe contener una valida dirección electrónica, por ejemplo 'jane.doe@eno-lang.org'.`,
      invalidFloat: (name) => `'${name}' debe contener un número decimal, por ejemplo '13.0', '-9.159' o '42'.`,
      invalidInteger: (name) => `'${name}' debe contener un número entero, por ejemplo '42' o '-21'.`,
      invalidJson: (name, error) => `'${name}' debe contener JSON valido - el mensaje del parser fue '${error}'.`,
      invalidLatLng: (name) => `'${name}' debe contener una valida pareja de coordenadas latitud/longitud, por ejemplo '48.2093723, 16.356099'.`,
      invalidUrl: (name) => `'${name}' debe contener un URL valido, por ejemplo 'https://eno-lang.org'.`
    }
  }
};
